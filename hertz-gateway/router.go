// Code generated by hertz generator.

package main

import (
	"os"
	"strings"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/transmeta"
	"github.com/cloudwego/kitex/transport"
	handler "github.com/joeescn/hertz-gateway/biz/handler"
	consul "github.com/kitex-contrib/registry-consul"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/ping", handler.Ping)

	// your code ...
	registerGateway(r)
}

// registerGateway registers the router of gateway
func registerGateway(r *server.Hertz) {
	group := r.Group("/gateway")

	if handler.SvcMap == nil {
		handler.SvcMap = make(map[string]genericclient.Client)
	}
	idlPath := "../hello-svc/idl/"
	c, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Fatalf("new thrift file provider failed: %v", err)
	}

	resolver, err := consul.NewConsulResolver("127.0.0.1:8500")
	if err != nil {
		hlog.Fatalf("err:%v", err)
	}

	for _, entry := range c {
		if entry.IsDir() || entry.Name() == "common.thrift" {
			continue
		}
		svcName := strings.ReplaceAll(entry.Name(), ".thrift", "")

		provider, err := generic.NewThriftFileProvider(entry.Name(), idlPath)
		if err != nil {
			hlog.Fatalf("new thrift file provider failed: %v", err)
			break
		}
		g, err := generic.HTTPThriftGeneric(provider)
		if err != nil {
			hlog.Fatal(err)
		}
		cli, err := genericclient.NewClient(
			svcName,
			g,
			client.WithResolver(resolver),
			client.WithTransportProtocol(transport.TTHeader),
			client.WithMetaHandler(transmeta.ClientTTHeaderHandler),
		)
		if err != nil {
			hlog.Fatal(err)
		}

		handler.SvcMap[svcName] = cli
		group.POST("/:svc/:method", handler.Gateway)
	}
}
